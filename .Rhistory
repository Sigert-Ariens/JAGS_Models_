if(is.element(data$Congruence[i], c(1)) == TRUE){
data.c[i,] <- as.matrix(data[i,])
}
}
data.c <- na.omit(data.c)
data.c <- as.data.frame(data.c)
colnames(data.c) <- varnames
DataList.1.C = list(
y = data.c$Acc,
pp = data.c$Subject,
Nsub = 36,
Nratio = data.c$Nratio,
CHratio = data.c$CHratio,
Densityratio = data.c$Densityratio,
Surfaceratio = data.c$Surfaceratio,
Itemsizeratio = data.c$ItemSizeRatio,
Circumfrenceratio = data.c$CircumfrenceRatio,
Ntrial = nrow(data.c)
)
nchains = 2
nadapt = 1000 #many uninformative dispersion parameters
nburn = 300
niter = 2200
myinits <- NULL
ModelString = "
model {
## Each accuracy score has a chance of being correct, which is binominally distributed JUST DONT USE PPS AND ITS FINE
for(i in 1:Ntrial){
y[i] ~ dbinom(theta[i], 1)
## The value of the binominal parameter is a logit transform of the regression using the ratio's as wieghts. Each participant has a seperate error term beta0
logit(theta[i]) = beta0[pp[i]] + betaN*Nratio[i] + betaCH*CHratio[i] + betaDensity*Densityratio[i] + betaSurface*Surfaceratio[i] + betaItemsize*Itemsizeratio[i] + betaCircumfrence*Circumfrenceratio[i] + betacong*Congruence[i]
}
## Priors
for(q in 1:Nsub){
beta0[q] ~ dnorm(0, 1/sigma^2)
}
betaN ~ dnorm(0, 1/sigma^2)
betaCH ~ dnorm(0, 1/sigma^2)
betaDensity ~ dnorm(0, 1/sigma^2)
betaSurface ~ dnorm(0, 1/sigma^2)
betaItemsize ~ dnorm(0, 1/sigma^2)
betaCircumfrence ~ dnorm(0, 1/sigma^2)
betacong ~ dnorm(0, 1/sigma^2)
sigma ~ dunif( 1.0E-3 , 1.0E+3 )
}
"
writeLines(ModelString , con="Model_1_C")
parameters<- c("betaN", "betaCH","betaDensity", "betaSurface", "betaItemsize", "betaCircumfrence")
out.model.1.C <- run.jags(model = "Model_1_C", monitor = parameters, data = DataList.1.C, n.chains = nchains, adapt = nadapt, burnin = nburn, sample = niter)#, thin = 1)
list.of.packages <- c("knitr","rjags","runjags", "psych", "ggplot2", "coda", "papaja","robustHD")
new.packages <- list.of.packages[!(list.of.packages %in%installed.packages()[,"Package"])]
if(length(new.packages)){install.packages(new.packages,repos = "http://cran.us.r-project.org")}
lapply(list.of.packages, require, character.only = TRUE)
knitr::opts_chunk$set(echo = TRUE)
data <- read.delim(file = 'First Sample Data.csv', sep = ",", header = TRUE)
varnames <- c("Subject", "Acc", "RT", "Congruence", "Nratio", "ImageIndex", "CHratio", "ItemSizeRatio", "CircumfrenceRatio", "Densityratio", "Surfaceratio")
colnames(data) <- varnames
data.c <- matrix(nrow = nrow(data), ncol = ncol(data))
for(i in 1:nrow(data.c)){
if(is.element(data$Congruence[i], c(1)) == TRUE){
data.c[i,] <- as.matrix(data[i,])
}
}
data.c <- na.omit(data.c)
data.c <- as.data.frame(data.c)
colnames(data.c) <- varnames
DataList.1.C = list(
y = data.c$Acc,
pp = data.c$Subject,
Nsub = 36,
Nratio = data.c$Nratio,
CHratio = data.c$CHratio,
Densityratio = data.c$Densityratio,
Surfaceratio = data.c$Surfaceratio,
Itemsizeratio = data.c$ItemSizeRatio,
Circumfrenceratio = data.c$CircumfrenceRatio,
Ntrial = nrow(data.c)
)
nchains = 2
nadapt = 1000 #many uninformative dispersion parameters
nburn = 300
niter = 2200
myinits <- NULL
ModelString = "
model {
## Each accuracy score has a chance of being correct, which is binominally distributed JUST DONT USE PPS AND ITS FINE
for(i in 1:Ntrial){
y[i] ~ dbinom(theta[i], 1)
## The value of the binominal parameter is a logit transform of the regression using the ratio's as wieghts. Each participant has a seperate error term beta0
logit(theta[i]) = beta0[pp[i]] + betaN*Nratio[i] + betaCH*CHratio[i] + betaDensity*Densityratio[i] + betaSurface*Surfaceratio[i] + betaItemsize*Itemsizeratio[i] + betaCircumfrence*Circumfrenceratio[i]
}
## Priors
for(q in 1:Nsub){
beta0[q] ~ dnorm(0, 1/sigma^2)
}
betaN ~ dnorm(0, 1/sigma^2)
betaCH ~ dnorm(0, 1/sigma^2)
betaDensity ~ dnorm(0, 1/sigma^2)
betaSurface ~ dnorm(0, 1/sigma^2)
betaItemsize ~ dnorm(0, 1/sigma^2)
betaCircumfrence ~ dnorm(0, 1/sigma^2)
sigma ~ dunif( 1.0E-3 , 1.0E+3 )
}
"
writeLines(ModelString , con="Model_1_C")
parameters<- c("betaN", "betaCH","betaDensity", "betaSurface", "betaItemsize", "betaCircumfrence")
out.model.1.C <- run.jags(model = "Model_1_C", monitor = parameters, data = DataList.1.C, n.chains = nchains, adapt = nadapt, burnin = nburn, sample = niter)#, thin = 1)
write.table( file = "Model_1_C.csv", as.mcmc.list(out.model.1.C), sep = ',')
write.table( file = "Model_1_C_parameters.csv", summary(out.model.1.C), sep = ",")
autocorr.plot(out.model.1.C)
autocorr.plot(out.model.1.C, xlim = c(0,200))
autocorr.plot(out.model.1.C, xlim = c(0,50))
autocorr.plot(out.model.1.C, xlim = c(0,25))
autocorr.plot(as.mcmc.list(out.model.1.C), xlim = c(0,25))
autocorr.plot(as.mcmc.list(out.model.1.C), xlim = c(0,100))
summary(out.model.1.C)
nchains = 2
nadapt = 1000 #many uninformative dispersion parameters
nburn = 800
niter = 2500
myinits <- NULL
ModelString = "
model {
## Each accuracy score has a chance of being correct, which is binominally distributed JUST DONT USE PPS AND ITS FINE
for(i in 1:Ntrial){
y[i] ~ dbinom(theta[i], 1)
## The value of the binominal parameter is a logit transform of the regression using the ratio's as wieghts. Each participant has a seperate error term beta0
logit(theta[i]) = beta0[pp[i]] + betaN*Nratio[i] + betaCH*CHratio[i] + betaDensity*Densityratio[i] + betaSurface*Surfaceratio[i] + betaItemsize*Itemsizeratio[i] + betaCircumfrence*Circumfrenceratio[i]
}
## Priors
for(q in 1:Nsub){
beta0[q] ~ dnorm(0, 1/sigma^2)
}
betaN ~ dnorm(0, 1/sigma^2)
betaCH ~ dnorm(0, 1/sigma^2)
betaDensity ~ dnorm(0, 1/sigma^2)
betaSurface ~ dnorm(0, 1/sigma^2)
betaItemsize ~ dnorm(0, 1/sigma^2)
betaCircumfrence ~ dnorm(0, 1/sigma^2)
sigma ~ dunif( 1.0E-3 , 1.0E+3 )
}
"
writeLines(ModelString , con="Model_1_C")
parameters<- c("betaN", "betaCH","betaDensity", "betaSurface", "betaItemsize", "betaCircumfrence")
out.model.1.C <- run.jags(model = "Model_1_C", monitor = parameters, data = DataList.1.C, n.chains = nchains, adapt = nadapt, burnin = nburn, sample = niter)#, thin = 1)
autocorr.plot(as.mcmc.list(out.model.1.C), xlim = c(0,100))
write.table( file = "Model_1_C_parameters.csv", summary(out.model.1.C), sep = ",")
effectiveSize(out.model.1.C)
run.1 <- effectiveSize(out.model.1.C)
ModelString = "
model {
## Each accuracy score has a chance of being correct
for(i in 1:Ntrial){
y[i] ~ dbern(theta[i])
## The value of the binominal parameter is a logit transform of the regression using the ratio's as wieghts. Each participant has a seperate error term beta0
logit(theta[i]) = beta0[pp[i]] + betaN*Nratio[i] + betaCH*CHratio[i] + betaDensity*Densityratio[i] + betaSurface*Surfaceratio[i] + betaItemsize*Itemsizeratio[i] + betaCircumfrence*Circumfrenceratio[i]
}
## Priors
for(q in 1:Nsub){
beta0[q] ~ dnorm(0, 1/sigma^2)
}
betaN ~ dnorm(0, 1/sigma^2)
betaCH ~ dnorm(0, 1/sigma^2)
betaDensity ~ dnorm(0, 1/sigma^2)
betaSurface ~ dnorm(0, 1/sigma^2)
betaItemsize ~ dnorm(0, 1/sigma^2)
betaCircumfrence ~ dnorm(0, 1/sigma^2)
sigma ~ dunif( 1.0E-3 , 1.0E+3 )
}
"
writeLines(ModelString , con="Model_1_C")
parameters<- c("betaN", "betaCH","betaDensity", "betaSurface", "betaItemsize", "betaCircumfrence")
out.model.1.C <- run.jags(model = "Model_1_C", monitor = parameters, data = DataList.1.C, n.chains = nchains, adapt = nadapt, burnin = nburn, sample = niter)#, thin = 1)
autocorr.plot(as.mcmc.list(out.model.1.C), xlim = c(0,100))
write.table( file = "Model_1_C_parameters.csv", summary(out.model.1.C), sep = ",")
run.2 <- effectiveSize(out.model.1.C)
run.2
run.1
autocorr.plot(as.mcmc.list(out.model.1.C), xlim = c(0,100))
summary(out.model.1.C)
ModelString = "
model {
## Each accuracy score has a chance of being correct
for(i in 1:Ntrial){
y[i] ~ dbern(theta[i])
## The value of the binominal parameter is a logit transform of the regression using the ratio's as wieghts. Each participant has a seperate error term beta0
logit(theta[i]) = beta0[pp[i]] + betaN*Nratio[i] + betaCH*CHratio[i] + betaDensity*Densityratio[i] + betaSurface*Surfaceratio[i] + betaItemsize*Itemsizeratio[i] + betaCircumfrence*Circumfrenceratio[i]
}
## Priors
for(q in 1:Nsub){
beta0[q] ~ dnorm(0, 1/sigma^2)
}
betaN ~ dnorm(0, 1/sigma^2)
betaCH ~ dnorm(0, 1/sigma^2)
betaDensity ~ dnorm(0, 1/sigma^2)
betaSurface ~ dnorm(0, 1/sigma^2)
betaItemsize ~ dnorm(0, 1/sigma^2)
betaCircumfrence ~ dnorm(0, 1/sigma^2)
sigma ~ dunif( 1.0E-3 , 1.0E+3 )
}
"
writeLines(ModelString , con="Model_1_C")
nchains = 2
nadapt = 1000 #many uninformative dispersion parameters
nburn = 800
niter = 3000
myinits <- NULL
parameters<- c("betaN", "betaCH","betaDensity", "betaSurface", "betaItemsize", "betaCircumfrence")
out.model.1.C <- run.jags(model = "Model_1_C", monitor = parameters, data = DataList.1.C, n.chains = nchains, adapt = nadapt, burnin = nburn, sample = niter)#, thin = 1)
autocorr.plot(as.mcmc.list(out.model.1.C), xlim = c(0,100))
write.table( file = "Model_1_C_parameters.csv", summary(out.model.1.C), sep = ",")
summary(out.model.1.C)
run.2 <- effectiveSize(out.model.1.C)
View(run.2)
nchains = 2
nadapt = 1000 #many uninformative dispersion parameters
nburn = 800
niter = 5000
myinits <- NULL
ModelString = "
model {
## Each accuracy score has a chance of being correct
for(i in 1:Ntrial){
y[i] ~ dbern(theta[i])
## The value of the binominal parameter is a logit transform of the regression using the ratio's as wieghts. Each participant has a seperate error term beta0
logit(theta[i]) = beta0[pp[i]] + betaN*Nratio[i] + betaCH*CHratio[i] + betaDensity*Densityratio[i] + betaSurface*Surfaceratio[i] + betaItemsize*Itemsizeratio[i] + betaCircumfrence*Circumfrenceratio[i]
}
## Priors
for(q in 1:Nsub){
beta0[q] ~ dnorm(0, 1/sigma^2)
}
betaN ~ dnorm(0, 1/sigma^2)
betaCH ~ dnorm(0, 1/sigma^2)
betaDensity ~ dnorm(0, 1/sigma^2)
betaSurface ~ dnorm(0, 1/sigma^2)
betaItemsize ~ dnorm(0, 1/sigma^2)
betaCircumfrence ~ dnorm(0, 1/sigma^2)
sigma ~ dunif( 1.0E-3 , 1.0E+3 )
}
"
writeLines(ModelString , con="Model_1_C")
parameters<- c("betaN", "betaCH","betaDensity", "betaSurface", "betaItemsize", "betaCircumfrence")
out.model.1.C <- run.jags(model = "Model_1_C", monitor = parameters, data = DataList.1.C, n.chains = nchains, adapt = nadapt, burnin = nburn, sample = niter)#, thin = 1)
autocorr.plot(as.mcmc.list(out.model.1.C), xlim = c(0,100))
summary(out.model.1.C)
run.3 <- effectiveSize(out.model.1.C)
run.3 <- effectiveSize(out.model.1.C)
run.3
autocorr.plot(as.mcmc.list(out.model.1.C), xlim = c(0,100))
autocorr.plot(as.mcmc.list(out.model.1.C), xlim = c(0,100))
mcmc.c <- as.mcmc.list(out.model.1.C)
traceplot(out.model.1.C)
traceplot(mcmc.c)
nchains = 2
nadapt = 1000 #many uninformative dispersion parameters
nburn = 800
niter = 10000
myinits <- NULL
ModelString = "
model {
## Each accuracy score has a chance of being correct
for(i in 1:Ntrial){
y[i] ~ dbern(theta[i])
## The value of the binominal parameter is a logit transform of the regression using the ratio's as wieghts. Each participant has a seperate error term beta0
logit(theta[i]) = beta0[pp[i]] + betaN*Nratio[i] + betaCH*CHratio[i] + betaDensity*Densityratio[i] + betaSurface*Surfaceratio[i] + betaItemsize*Itemsizeratio[i] + betaCircumfrence*Circumfrenceratio[i]
}
## Priors
for(q in 1:Nsub){
beta0[q] ~ dnorm(0, 1/sigma^2)
}
betaN ~ dnorm(0, 1/sigma^2)
betaCH ~ dnorm(0, 1/sigma^2)
betaDensity ~ dnorm(0, 1/sigma^2)
betaSurface ~ dnorm(0, 1/sigma^2)
betaItemsize ~ dnorm(0, 1/sigma^2)
betaCircumfrence ~ dnorm(0, 1/sigma^2)
sigma ~ dunif( 1.0E-3 , 1.0E+3 )
}
"
writeLines(ModelString , con="Model_1_C")
parameters<- c("betaN", "betaCH","betaDensity", "betaSurface", "betaItemsize", "betaCircumfrence")
out.model.1.C <- run.jags(model = "Model_1_C", monitor = parameters, data = DataList.1.C, n.chains = nchains, adapt = nadapt, burnin = nburn, sample = niter,method = "parallel")#, thin = 1)
autocorr.plot(as.mcmc.list(out.model.1.C), xlim = c(0,100))
summary(out.model.1.C)
run.3 <- effectiveSize(out.model.1.C)
mcmc.c <- as.mcmc.list(out.model.1.C)
traceplot(mcmc.c)
run.3
summary(out.model.1.C)
write.table(summary(out.model.1.C), file = "parameters_model_1_C.csv", sep = ',')
write.table(effectiveSize(out.model.1.C), file = "ESS_model_1_C.csv", sep = ',')
write.table(as.mcmc.list(out.model.1.C), file = 'mcmc_model_1_C.csv', sep = ',')
write.list(as.mcmc.list(out.model.1.C), file = 'mcmc_model_1_C.csv', sep = ',')
jpeg(traceplot(mcmc.c), 'traceplot_model_1_C.jpg')
dev.copy(traceplot(mcmc.c), 'traceplot_model_1_C.jpg')
dev.copy(png, traceplot(mcmc.c), 'traceplot_model_1_C.jpg')
mcmc.c <- as.mcmc.list(out.model.1.C)
pdf('traceplot_model_1_C.jpg')
traceplot(mcmc.c)
dev.off()
mcmc.c <- as.mcmc.list(out.model.1.C)
pdf('traceplot_model_1_C.pdf')
traceplot(mcmc.c)
dev.off()
rm(list = ls())
list.of.packages <- c("knitr","rjags","runjags", "psych", "ggplot2", "coda", "papaja","robustHD")
new.packages <- list.of.packages[!(list.of.packages %in%installed.packages()[,"Package"])]
if(length(new.packages)){install.packages(new.packages,repos = "http://cran.us.r-project.org")}
lapply(list.of.packages, require, character.only = TRUE)
knitr::opts_chunk$set(echo = TRUE)
data <- read.delim(file = 'First Sample Data.csv', sep = ",", header = TRUE)
varnames <- c("Subject", "Acc", "RT", "Congruence", "Nratio", "ImageIndex", "CHratio", "ItemSizeRatio", "CircumfrenceRatio", "Densityratio", "Surfaceratio")
colnames(data) <- varnames
data.ic <- matrix(nrow = nrow(data), ncol = ncol(data))
for(i in 1:nrow(data.ic)){
if(is.element(data$Congruence[i], c(0)) == TRUE){
data.ic[i,] <- as.matrix(data[i,])
}
}
data.ic <- na.omit(data.ic)
data.ic <- as.data.frame(data.ic)
colnames(data.ic) <- varnames
View(data.ic)
DataList.1.IC = list(
y = data.ic$Acc,
pp = data.ic$Subject,
Nsub = 36,
Nratio = data.ic$Nratio,
CHratio = data.ic$CHratio,
Densityratio = data.ic$Densityratio,
Surfaceratio = data.ic$Surfaceratio,
Itemsizeratio = data.ic$ItemSizeRatio,
Circumfrenceratio = data.ic$CircumfrenceRatio,
Ntrial = nrow(data.ic)
)
nchains = 2
nadapt = 1000 #many uninformative dispersion parameters
nburn = 1000
niter = 10000
myinits <- NULL
ModelString = "
model {
## Each accuracy score has a chance of being correct
for(i in 1:Ntrial){
y[i] ~ dbern(theta[i])
## The value of the binominal parameter is a logit transform of the regression using the ratio's as wieghts. Each participant has a seperate error term beta0
logit(theta[i]) = beta0[pp[i]] + betaN*Nratio[i] + betaCH*CHratio[i] + betaDensity*Densityratio[i] + betaSurface*Surfaceratio[i] + betaItemsize*Itemsizeratio[i] + betaCircumfrence*Circumfrenceratio[i]
}
## Priors
for(q in 1:Nsub){
beta0[q] ~ dnorm(0, 1/sigma^2)
}
betaN ~ dnorm(0, 1/sigma^2)
betaCH ~ dnorm(0, 1/sigma^2)
betaDensity ~ dnorm(0, 1/sigma^2)
betaSurface ~ dnorm(0, 1/sigma^2)
betaItemsize ~ dnorm(0, 1/sigma^2)
betaCircumfrence ~ dnorm(0, 1/sigma^2)
sigma ~ dunif( 1.0E-3 , 1.0E+3 )
}
"
writeLines(ModelString , con="Model_1_IC")
parameters<- c("betaN", "betaCH","betaDensity", "betaSurface", "betaItemsize", "betaCircumfrence")
out.model.1.IC <- run.jags(model = "Model_1_IC", monitor = parameters, data = DataList.1.IC, n.chains = nchains, adapt = nadapt, burnin = nburn, sample = niter,method = "parallel")#, thin = 1)
autocorr.plot(as.mcmc.list(out.model.1.IC), xlim = c(0,100))
write.table(summary(out.model.1.IC), file = "parameters_model_1_IC.csv", sep = ',')
write.table(effectiveSize(out.model.1.IC), file = "ESS_model_1_IC.csv", sep = ',')
mcmc.ic <- as.mcmc.list(out.model.1.IC)
pdf('traceplot_model_1_IC.pdf')
traceplot(mcmc.ic)
dev.off()
summary(out.model.1.IC)
effectiveSize(out.model.1.IC)
rm(list = ls())
list.of.packages <- c("knitr","rjags","runjags", "psych", "ggplot2", "coda", "papaja","robustHD")
new.packages <- list.of.packages[!(list.of.packages %in%installed.packages()[,"Package"])]
if(length(new.packages)){install.packages(new.packages,repos = "http://cran.us.r-project.org")}
lapply(list.of.packages, require, character.only = TRUE)
knitr::opts_chunk$set(echo = TRUE)
data <- read.delim(file = 'Data Sample 2.csv', sep = ",", header = TRUE)
varnames <- c("Subject", "Acc", "RT", "Congruence", "Nratio", "ImageIndex", "CHratio", "ItemSizeRatio", "CircumfrenceRatio", "Densityratio", "Surfaceratio")
colnames(data) <- varnames
View(data)
varnames <- c("Subject", "Acc", "Congruence", "ImageIndex","Nratio", "CHratio", "ItemSizeRatio", "CircumfrenceRatio", "Densityratio", "Surfaceratio")
colnames(data) <- varnames
data.c <- matrix(nrow = nrow(data), ncol = ncol(data))
for(i in 1:nrow(data.c)){
if(is.element(data$Congruence[i], c(1)) == TRUE){
data.c[i,] <- as.matrix(data[i,])
}
}
data.c <- na.omit(data.c)
data.c <- as.data.frame(data.c)
colnames(data.c) <- varnames
View(data.c)
DataList.2.C = list(
y = data.c$Acc,
pp = data.c$Subject,
Nsub = 36,
Nratio = data.c$Nratio,
CHratio = data.c$CHratio,
Densityratio = data.c$Densityratio,
Surfaceratio = data.c$Surfaceratio,
Itemsizeratio = data.c$ItemSizeRatio,
Circumfrenceratio = data.c$CircumfrenceRatio,
Ntrial = nrow(data.c)
)
nchains = 2
nadapt = 1000 #many uninformative dispersion parameters
nburn = 1000
niter = 1000
myinits <- NULL
ModelString = "
model {
## Each accuracy score has a chance of being correct
for(i in 1:Ntrial){
y[i] ~ dbern(theta[i])
## The value of the binominal parameter is a logit transform of the regression using the ratio's as wieghts. Each participant has a seperate error term beta0
logit(theta[i]) = beta0[pp[i]] + betaN*Nratio[i] + betaCH*CHratio[i] + betaDensity*Densityratio[i] + betaSurface*Surfaceratio[i] + betaItemsize*Itemsizeratio[i] + betaCircumfrence*Circumfrenceratio[i]
}
## Priors
for(q in 1:Nsub){
beta0[q] ~ dnorm(0, 1/sigma^2)
}
betaN ~ dnorm(0, 1/sigma^2)
betaCH ~ dnorm(0, 1/sigma^2)
betaDensity ~ dnorm(0, 1/sigma^2)
betaSurface ~ dnorm(0, 1/sigma^2)
betaItemsize ~ dnorm(0, 1/sigma^2)
betaCircumfrence ~ dnorm(0, 1/sigma^2)
sigma ~ dunif( 1.0E-3 , 1.0E+3 )
}
"
writeLines(ModelString , con="Model_2_C")
parameters<- c("betaN", "betaCH","betaDensity", "betaSurface", "betaItemsize", "betaCircumfrence")
out.model.2.C <- run.jags(model = "Model_2_C", monitor = parameters, data = DataList.2.C, n.chains = nchains, adapt = nadapt, burnin = nburn, sample = niter,method = "parallel")#, thin = 1)
autocorr.plot(as.mcmc.list(out.model.2.C), xlim = c(0,100))
write.table(summary(out.model.2.C), file = "parameters_model_2_C.csv", sep = ',')
write.table(effectiveSize(out.model.2.C), file = "ESS_model_2_C.csv", sep = ',')
mcmc.c <- as.mcmc.list(out.model.2.C)
pdf('traceplot_model_2_C.pdf')
traceplot(mcmc.c)
dev.off()
summary(out.model.2.C)
effectiveSize(out.model.2.C)
rm(list = ls())
list.of.packages <- c("knitr","rjags","runjags", "psych", "ggplot2", "coda", "papaja","robustHD")
new.packages <- list.of.packages[!(list.of.packages %in%installed.packages()[,"Package"])]
if(length(new.packages)){install.packages(new.packages,repos = "http://cran.us.r-project.org")}
lapply(list.of.packages, require, character.only = TRUE)
knitr::opts_chunk$set(echo = TRUE)
data <- read.delim(file = 'Data Sample 2.csv', sep = ",", header = TRUE)
varnames <- c("Subject", "Acc", "Congruence", "ImageIndex","Nratio", "CHratio", "ItemSizeRatio", "CircumfrenceRatio", "Densityratio", "Surfaceratio")
colnames(data) <- varnames
data.ic <- matrix(nrow = nrow(data), ncol = ncol(data))
for(i in 1:nrow(data.ic)){
if(is.element(data$Congruence[i], c(0)) == TRUE){
data.ic[i,] <- as.matrix(data[i,])
}
}
data.ic <- na.omit(data.ic)
data.ic <- as.data.frame(data.ic)
colnames(data.ic) <- varnames
DataList.2.IC = list(
y = data.ic$Acc,
pp = data.ic$Subject,
Nsub = 36,
Nratio = data.ic$Nratio,
CHratio = data.ic$CHratio,
Densityratio = data.ic$Densityratio,
Surfaceratio = data.ic$Surfaceratio,
Itemsizeratio = data.ic$ItemSizeRatio,
Circumfrenceratio = data.ic$CircumfrenceRatio,
Ntrial = nrow(data.ic)
)
nchains = 2
nadapt = 1000 #many uninformative dispersion parameters
nburn = 1000
niter = 1000
myinits <- NULL
ModelString = "
model {
## Each accuracy score has a chance of being correct
for(i in 1:Ntrial){
y[i] ~ dbern(theta[i])
## The value of the binominal parameter is a logit transform of the regression using the ratio's as wieghts. Each participant has a seperate error term beta0
logit(theta[i]) = beta0[pp[i]] + betaN*Nratio[i] + betaCH*CHratio[i] + betaDensity*Densityratio[i] + betaSurface*Surfaceratio[i] + betaItemsize*Itemsizeratio[i] + betaCircumfrence*Circumfrenceratio[i]
}
## Priors
for(q in 1:Nsub){
beta0[q] ~ dnorm(0, 1/sigma^2)
}
betaN ~ dnorm(0, 1/sigma^2)
betaCH ~ dnorm(0, 1/sigma^2)
betaDensity ~ dnorm(0, 1/sigma^2)
betaSurface ~ dnorm(0, 1/sigma^2)
betaItemsize ~ dnorm(0, 1/sigma^2)
betaCircumfrence ~ dnorm(0, 1/sigma^2)
sigma ~ dunif( 1.0E-3 , 1.0E+3 )
}
"
writeLines(ModelString , con="Model_2_IC")
parameters<- c("betaN", "betaCH","betaDensity", "betaSurface", "betaItemsize", "betaCircumfrence")
out.model.2.IC <- run.jags(model = "Model_2_IC", monitor = parameters, data = DataList.2.IC, n.chains = nchains, adapt = nadapt, burnin = nburn, sample = niter,method = "parallel")#, thin = 1)
autocorr.plot(as.mcmc.list(out.model.2.IC), xlim = c(0,100))
write.table(summary(out.model.2.IC), file = "parameters_model_2_IC.csv", sep = ',')
write.table(effectiveSize(out.model.2.IC), file = "ESS_model_2_IC.csv", sep = ',')
mcmc.ic <- as.mcmc.list(out.model.2.IC)
pdf('traceplot_model_2_IC.pdf')
traceplot(mcmc.ic)
dev.off()
summary(out.model.2.IC)
